{
  "name": "minimodel",
  "description": "Minimal, database agnostic Models for Node.js (and the Browser)",
  "version": "0.2.2",
  "author": {
    "name": "Mario Casciaro"
  },
  "main": "lib",
  "homepage": "https://github.com/mariocasciaro/minimodel",
  "repository": {
    "type": "git",
    "url": "git://github.com/mariocasciaro/minimodel.git"
  },
  "dependencies": {
    "inherits": "~2.0.1",
    "object-path": "~0.1.2",
    "extend": "~1.2.1",
    "when": "~2.7.1",
    "async": "~0.2.10"
  },
  "devDependencies": {
    "mocha": "~1.13.0",
    "chai": "~1.8.0",
    "mocha-lcov-reporter": "~0.0.1",
    "coveralls": "~2.3.0",
    "istanbul": "~0.1.44"
  },
  "scripts": {
    "test": "./node_modules/istanbul/lib/cli.js cover ./node_modules/mocha/bin/_mocha test/*.js --report html -- -R spec"
  },
  "testling": {
    "browsers": {
      "ie": [
        8,
        9
      ],
      "firefox": [
        10,
        24
      ],
      "chrome": [
        30,
        22
      ],
      "safari": [
        5,
        6
      ],
      "opera": [
        15
      ],
      "iphone": [
        6
      ],
      "android-browser": [
        4.2
      ]
    },
    "harness": "mocha",
    "files": "test/*.js"
  },
  "keywords": [
    "model",
    "lightweight",
    "models",
    "domain model",
    "schema",
    "validation"
  ],
  "license": "MIT",
  "readme": "[![NPM version](https://badge.fury.io/js/minimodel.png)](http://badge.fury.io/js/minimodel)\n[![Build Status](https://travis-ci.org/mariocasciaro/minimodel.png)](https://travis-ci.org/mariocasciaro/minimodel)\n[![Coverage Status](https://coveralls.io/repos/mariocasciaro/minimodel/badge.png)](https://coveralls.io/r/mariocasciaro/minimodel)\n[![Dependency Status](https://gemnasium.com/mariocasciaro/minimodel.png)](https://gemnasium.com/mariocasciaro/minimodel)\n\n[![browser support](https://ci.testling.com/mariocasciaro/minimodel.png)](http://ci.testling.com/mariocasciaro/minimodel)\n\n# Minimodel\n\nMinimal, database agnostic Models for Node.js and the Browser. \n\nThe idea is to implement a Domain Model System that is persitence agnostic, to be used only for validation, type casting, transormations, and business logic. By using `minimodel`, persintence (if relevant) has to be delegated to an external component (e.g. DAO/Services).\n\n__Advantages__\n\n* The same model can be retrieved from different data sources \n* Easily reuse the same models in the Browser\n* Custom persitence allows more fine grained and powerful queries (instead of using an imposed ORM style querying system)\n\n__Features__\n  * Define schemas with a syntax similar to Mongoose's\n  * Type checking/casting\n  * Defaults\n  * Validation\n  * Virtuals\n  * Custom getters/setters\n\n## Usage\n\n```javascript\nvar minimodel = require('minimodel');\n\nvar Post = minimodel.define({\n  id: {\n    //the field is a String\n    type: String,\n    //the field is required\n    required: true\n  },\n  createdDate: {\n    type: Date,\n    //set the default (can be a value or a function)\n    default: function() {\n      //the execution context is the field itself\n      this.setRaw(new Date());\n    }\n  },\n  visits: {\n    type: Number,\n    default: 0,\n    //do not include during object export using toJson()\n    includeInJson: false\n    //other options include\n    //includeInObject: false\n    //includeInDb: false\n  },\n  //a nested object\n  author: {\n    //shortcut to define a field\n    name: String,\n    surname: String,\n    fullname: {\n      //Virtuals are by default not exported (e.g. using toObject())\n      //Virtuals do not have any default getter/setter, neet to define them explicitly\n      type: minimodel.Types.Virtual,\n      //a custom getter\n      get: function() {\n        return this.model.author.name + \" \" + this.model.author.surname;\n      },\n      //a custom setter\n      set: function(val) {\n        var parts = val.split(' ');\n        this.model.setRaw({\n          author: {\n            name: parts[0],\n            surname: parts[1]\n          }\n        });\n      }\n    }\n  }\n});\n\n//create a post\nvar post = new Post({\n  id: Date.now(),\n  author: {\n    fullname: \"John Doe\"\n  }\n});\n\n//set a field after creation\npost.set('author.name', 'Joe');\n//or\npost.author.name = 'Johnny'\n\n//get a field\nconsole.log(post.get('author.fullname'));\n//or\nconsole.log(post.author.name);\n\n```\n\n## Stability\n\n**1 - Experimental**\n\nPlease try it out and provide feedback.\n\n## What's new\n\n#### 0.2\n\n* **Breaking changes**:\n    * `validate()` is now an async function. A callback could be given as argument otherwise a promise will be returned.\n\n---\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/mariocasciaro/minimodel/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/mariocasciaro/minimodel/issues"
  },
  "_id": "minimodel@0.2.2",
  "dist": {
    "shasum": "52a1165160105b4cb25de74bd831ed1433b8bb87"
  },
  "_from": "minimodel@~0.2.2",
  "_resolved": "https://registry.npmjs.org/minimodel/-/minimodel-0.2.2.tgz"
}
