{
  "name": "level-indico",
  "description": "Simple indexing and querying for leveldb",
  "version": "0.3.1",
  "author": {
    "name": "Mario Casciaro"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/mariocasciaro/level-indico"
  },
  "bugs": {
    "url": "https://github.com/mariocasciaro/level-indico/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/mariocasciaro/level-indico/blob/master/LICENSE"
    }
  ],
  "engines": {
    "node": ">= 0.8.0"
  },
  "main": "lib",
  "dependencies": {
    "lodash": "~2.2.0",
    "level-sublevel": "~5.1.1",
    "bytewise": "~0.6.0",
    "object-path": "~0.1.0",
    "readable-stream": "~1.1.9",
    "endpoint": "~0.4.2",
    "bops": "~0.1.0"
  },
  "devDependencies": {
    "levelup": "~0.17.0",
    "leveldown": "~0.9.1",
    "mocha": "~1.13.0",
    "chai": "~1.8.0",
    "async": "~0.2.9",
    "mocha-lcov-reporter": "~0.0.1",
    "coveralls": "~2.3.0",
    "istanbul": "~0.1.44",
    "through": "~2.3.4"
  },
  "scripts": {
    "test": "./node_modules/istanbul/lib/cli.js cover ./node_modules/mocha/bin/_mocha test/*.js --report html -- -R spec"
  },
  "keywords": [
    "leveldb",
    "levelup",
    "index",
    "query",
    "indices",
    "indexer"
  ],
  "readme": "# Synopsis\n\nCreate and manage indices for your [leveldb](https://github.com/rvagg/node-levelup) database.\n\n* Provides simple querying of indexed data\n* Supports inverted sorting of indices (e.g. sort a Date from newer to older)\n* Uses [bytewise](https://github.com/deanlandolt/bytewise) encoding for indices.\n* Supports automatic indexing (using hooks).\n* Works with changing fields (with some performance impact during reads).\n\n[![NPM](https://nodei.co/npm/level-indico.png?downloads=true)](https://nodei.co/npm/level-indico/)\n\n[![Build Status](https://travis-ci.org/mariocasciaro/level-indico.png)](https://travis-ci.org/mariocasciaro/level-indico) [![Dependency Status](https://david-dm.org/mariocasciaro/level-indico.png)](https://david-dm.org/mariocasciaro/level-indico)\n\n# Stability\n\n2 - Unstable\n\nThe API is in the process of settling, but has not yet had\nsufficient real-world testing to be considered stable.\n\n# Usage\n\n```javascript\nvar indico = require('level-indico');\n\nvar db = sublevel(level('db', { valueEncoding: 'json' }));\n\n//set indices on a sublevel\nvar posts = indico(db.sublevel('posts'));\n\n/*\n  post = {\n    title: String,\n    commentCount: Number,\n    user: {\n      name: String, \n      id: String\n    },\n    createdDate: Date\n  }\n\n*/\n\n//set a single index,  and save the index object for later use\nvar titleIndex = posts.indico.ensureIndex(['title']);\nposts.indico.ensureIndex(['createdDate']);\n//works with nested properties\nposts.indico.ensureIndex(['user.id']);\n//set a compound index\nposts.indico.ensureIndex(['title', 'commentCount']);\n//set a descending index on 'createdDate' (so it sorts from newer to older)\nposts.indico.ensureIndex([['createdDate', 'desc'], 'commentCount']);\n\n//[...] Put some data\n\n//Now query...\n\n//SELECT * FROM posts WHERE title = 'Hello'\ntitleIndex.find({start: ['Hello'], end: ['Hello']}, function (err, data) {\n  //...\n});\n\n//SELECT * FROM posts WHERE title = 'Hello' AND commentCount >= 1\nposts.indico.findBy(['title', 'commentCount'], {start: ['Hello', 1], end: ['Hello', undefined]}, function (err, data) {\n  //...\n});\n\n//SELECT * FROM posts ORDER BY createdDate DESC\nposts.indico.findBy([['createdDate', 'desc']], {start: [null], end: [undefined]}, function (err, data) {\n  //...\n});\n\n//SELECT * FROM posts WHERE createdDate <= '1/1/2010' AND commentCount >= 10\nposts.indico.findBy([['createdDate', 'desc'], 'commentCount'], {\n    start: [new Date(2010,01,00), 10],\n    end: [undefined, undefined]\n  }, function (err, data) {\n  //...\n});\n\n//SELECT * FROM posts ORDER BY createdDate ASC\nposts.indico.streamBy([['createdDate', 'desc']], {start: [null], end: [undefined]})\n.on('data', function(data) {\n//...\n})\n.on(close, function() {\n//...\n})\n\n```\n\n# API\n\n## db.indico\n\n<a name=\"indico-ensureindex\"></a>\n### indico.ensureIndex(properties)\n\nSets an index on the specified properties.\n\n__Arguments__\n\n* `properties`: an `Array` listing the properties to index. Each item can be:\n    * `String`: (e.g `'title'`) the property to include in the index, by default sorted Ascending.\n    * `Array`: An array containing 2 `String` items:\n        * `[0]`: The property name\n        * `[1]`: The sorting order, one between `'desc'` and `'asc'`.\n\n__Returns__\n\n`QueryManager` for the specified index.\n\n__Example__\n\n```js\nvar titleIndex = db.indico.ensureIndex(['title']);\nvar dateAndCommentIndex = db.indico.ensureIndex([['createdDate', 'desc'], 'commentCount']);\n\n```\n\n<a name=\"indico-index\"></a>\n### indico.index(properties)\n\nAlias of [indico.ensureIndex](#indico-ensureindex)\n\n<a name=\"indico-findby\"></a>\n### indico.findBy(properties, options, callback)\n\nInvokes [find](#querymanager-find) on the `QueryManager` corresponding to the specified `properties`\n\n<a name=\"indico-streamby\"></a>\n### indico.streamBy(properties, options)\n\nInvokes [stream](#querymanager-find) on the `QueryManager` corresponding to the specified `properties`\n\n## QueryManager\n\n\n<a name=\"querymanager-find\"></a>\n### find(options, callback)\n\nFinds all values corresponding to the specified options\n\n__Arguments__\n\n* `options`:\n    * `start`: `Array` specifying the index you wish to start the read at. It must have the same arity of the index.\n    * `end`: `Array` specifying index you wish to end the read on. It must have the same arity of the index.\n* `callback`: `function(err, data)`\n\nNote: Since level-indico uses [bytewise](https://github.com/deanlandolt/bytewise) under the hood, it means that `null` will sort before any other value, while `undefined` will sort aftern any other value.\n\n__Example__\n\n```js\n//SELECT * FROM posts WHERE title = 'Hello' ORDER BY commentCount ASC\nposts.indico.findBy(['title', 'commentCount'], {start: ['Hello', null], end: ['Hello', undefined]}, function (err, data) {\n  //...\n});\n```\n\n<a name=\"querymanager-stream\"></a>\n### stream(options)\n\nSame as [find](#querymanager-find), but returns a [ReadableStream](http://nodejs.org/docs/latest/api/stream.html#stream_readable_stream) for the specified query.\n\n\n# TODO\n\n* Index nested objects (not just values)\n* Full reindex\n\n\n# Breaking changes\n\n### 0.1 -> 0.2\n\n`ensureIndex('title', 'content')`\nbecomes\n`ensureIndex(['title', 'content'])`\n\n# License\n\nMIT\n\n-----\n\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/mariocasciaro/level-indico/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/mariocasciaro/level-indico",
  "_id": "level-indico@0.3.1",
  "dist": {
    "shasum": "9db25299401cf67cf5d78dc77bbc20f5d14dbae7"
  },
  "_from": "level-indico@~0.3.1",
  "_resolved": "https://registry.npmjs.org/level-indico/-/level-indico-0.3.1.tgz"
}
